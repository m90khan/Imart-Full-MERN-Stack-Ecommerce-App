[{"D:\\Projects\\Imart\\imart-app\\frontend\\src\\index.js":"1","D:\\Projects\\Imart\\imart-app\\frontend\\src\\reportWebVitals.js":"2","D:\\Projects\\Imart\\imart-app\\frontend\\src\\App.js":"3","D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\Footer.js":"4","D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\Header.js":"5","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\HomeScreen.js":"6","D:\\Projects\\Imart\\imart-app\\frontend\\src\\data\\products.js":"7","D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\Product.js":"8","D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\Rating.js":"9","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\ProductScreen.js":"10","D:\\Projects\\Imart\\imart-app\\frontend\\src\\store.js":"11","D:\\Projects\\Imart\\imart-app\\frontend\\src\\redux\\constants\\productConstants.js":"12","D:\\Projects\\Imart\\imart-app\\frontend\\src\\redux\\reducers\\productReducers.js":"13","D:\\Projects\\Imart\\imart-app\\frontend\\src\\redux\\actions\\productActions.js":"14","D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\Message.js":"15","D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\Loader.js":"16","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\CartScreen.js":"17","D:\\Projects\\Imart\\imart-app\\frontend\\src\\redux\\reducers\\cartReducers.js":"18","D:\\Projects\\Imart\\imart-app\\frontend\\src\\redux\\constants\\cartConstants.js":"19","D:\\Projects\\Imart\\imart-app\\frontend\\src\\redux\\actions\\cartActions.js":"20","D:\\Projects\\Imart\\imart-app\\frontend\\src\\redux\\reducers\\userReducers.js":"21","D:\\Projects\\Imart\\imart-app\\frontend\\src\\redux\\constants\\userConstants.js":"22","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\LoginScreen.js":"23","D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\FormContainer.js":"24","D:\\Projects\\Imart\\imart-app\\frontend\\src\\redux\\actions\\userActions.js":"25","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\RegisterScreen.js":"26","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\ProfileScreen.js":"27","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\ShippingScreen.js":"28","D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\CheckoutSteps.js":"29","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\PaymentScreen.js":"30","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\PlaceOrderScreen.js":"31","D:\\Projects\\Imart\\imart-app\\frontend\\src\\redux\\reducers\\orderReducers.js":"32","D:\\Projects\\Imart\\imart-app\\frontend\\src\\redux\\constants\\orderConstants.js":"33","D:\\Projects\\Imart\\imart-app\\frontend\\src\\redux\\actions\\orderActions.js":"34","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\OrderScreen.js":"35","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\UserListScreen.js":"36","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\UserEditScreen.js":"37","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\ProductListScreen.js":"38","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\ProductEditScreen.js":"39","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\OrderListScreen.js":"40","D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\Meta.js":"41","D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\SearchBox.js":"42","D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\Paginate.js":"43","D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\ProductCarousel.js":"44","D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\Newsletter.js":"45","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\MyOrderScreen.js":"46","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\AboutScreen.js":"47","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\ContactScreen.js":"48","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\TermScreen.js":"49","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\PrivacyScreen.js":"50"},{"size":676,"mtime":1608572188625,"results":"51","hashOfConfig":"52"},{"size":362,"mtime":499162500000,"results":"53","hashOfConfig":"52"},{"size":3221,"mtime":1613299635088,"results":"54","hashOfConfig":"52"},{"size":2617,"mtime":1613371930502,"results":"55","hashOfConfig":"52"},{"size":3941,"mtime":1613311865349,"results":"56","hashOfConfig":"52"},{"size":2019,"mtime":1613304726104,"results":"57","hashOfConfig":"52"},{"size":2490,"mtime":1607189304533,"results":"58","hashOfConfig":"59"},{"size":978,"mtime":1613304362766,"results":"60","hashOfConfig":"52"},{"size":867,"mtime":1613304399289,"results":"61","hashOfConfig":"52"},{"size":11878,"mtime":1613308784533,"results":"62","hashOfConfig":"52"},{"size":2429,"mtime":1607497334906,"results":"63","hashOfConfig":"52"},{"size":1567,"mtime":1607491214352,"results":"64","hashOfConfig":"52"},{"size":3778,"mtime":1607502925409,"results":"65","hashOfConfig":"52"},{"size":5757,"mtime":1608645515382,"results":"66","hashOfConfig":"52"},{"size":279,"mtime":1607229479842,"results":"67","hashOfConfig":"52"},{"size":434,"mtime":1613293500006,"results":"68","hashOfConfig":"52"},{"size":3933,"mtime":1613309849073,"results":"69","hashOfConfig":"52"},{"size":1228,"mtime":1608644792016,"results":"70","hashOfConfig":"52"},{"size":242,"mtime":1607404833932,"results":"71","hashOfConfig":"52"},{"size":1817,"mtime":1613222788230,"results":"72","hashOfConfig":"52"},{"size":3653,"mtime":1607442436911,"results":"73","hashOfConfig":"52"},{"size":1536,"mtime":1607437627412,"results":"74","hashOfConfig":"52"},{"size":2318,"mtime":1613305818207,"results":"75","hashOfConfig":"52"},{"size":350,"mtime":1613314669299,"results":"76","hashOfConfig":"52"},{"size":7076,"mtime":1608459977734,"results":"77","hashOfConfig":"52"},{"size":3324,"mtime":1613305885776,"results":"78","hashOfConfig":"52"},{"size":3994,"mtime":1613305934820,"results":"79","hashOfConfig":"52"},{"size":2621,"mtime":1613309170818,"results":"80","hashOfConfig":"52"},{"size":1298,"mtime":1608651074807,"results":"81","hashOfConfig":"52"},{"size":1853,"mtime":1608651170308,"results":"82","hashOfConfig":"52"},{"size":5504,"mtime":1608664974420,"results":"83","hashOfConfig":"52"},{"size":3565,"mtime":1607498282850,"results":"84","hashOfConfig":"52"},{"size":1286,"mtime":1607433775776,"results":"85","hashOfConfig":"52"},{"size":5886,"mtime":1608664197055,"results":"86","hashOfConfig":"52"},{"size":8855,"mtime":1613309795632,"results":"87","hashOfConfig":"52"},{"size":2848,"mtime":1608667317515,"results":"88","hashOfConfig":"52"},{"size":3299,"mtime":1607443559769,"results":"89","hashOfConfig":"52"},{"size":4264,"mtime":1607504365698,"results":"90","hashOfConfig":"52"},{"size":6213,"mtime":1607496501802,"results":"91","hashOfConfig":"52"},{"size":2597,"mtime":1613307234131,"results":"92","hashOfConfig":"52"},{"size":529,"mtime":1613302779985,"results":"93","hashOfConfig":"52"},{"size":777,"mtime":1613310044508,"results":"94","hashOfConfig":"52"},{"size":784,"mtime":1607497259201,"results":"95","hashOfConfig":"52"},{"size":1963,"mtime":1613319867331,"results":"96","hashOfConfig":"52"},{"size":1389,"mtime":1613304586024,"results":"97","hashOfConfig":"52"},{"size":2997,"mtime":1613307188813,"results":"98","hashOfConfig":"52"},{"size":2188,"mtime":1613302764366,"results":"99","hashOfConfig":"52"},{"size":3460,"mtime":1613301824153,"results":"100","hashOfConfig":"52"},{"size":2421,"mtime":1613299700438,"results":"101","hashOfConfig":"52"},{"size":2169,"mtime":1613299687464,"results":"102","hashOfConfig":"52"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},"h88msk",{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"105"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},"qhs3bv",{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"105"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"105"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"105"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"105"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"105"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"105"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"105"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},"D:\\Projects\\Imart\\imart-app\\frontend\\src\\index.js",[],["213","214"],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\reportWebVitals.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\App.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\Footer.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\Header.js",["215","216"],"import React from 'react';\r\nimport { Navbar, Nav, Image, Container, NavDropdown, Dropdown } from 'react-bootstrap';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { logout } from '../redux/actions/userActions';\r\nimport { Route } from 'react-router-dom';\r\n\r\nimport SearchBox from './SearchBox';\r\n\r\nconst Header = () => {\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n  const dispatch = useDispatch();\r\n  const logoutHandler = () => {\r\n    dispatch(logout());\r\n  };\r\n  return (\r\n    <header>\r\n      <Navbar bg='primary' expand='lg' variant='dark' collapseOnSelect>\r\n        <Container>\r\n          <LinkContainer to='/'>\r\n            <Navbar.Brand>\r\n              <img\r\n                src='/images/logo.png'\r\n                alt='logo'\r\n                style={{ width: '2rem', height: '2rem', marginRight: '1rem' }}\r\n              />\r\n\r\n              <strong\r\n                variant='dark'\r\n                style={{ fontFamily: \"'Pacifico', cursive\", fontWeight: 500 }}\r\n              >\r\n                AyaKaffee\r\n              </strong>\r\n            </Navbar.Brand>\r\n          </LinkContainer>\r\n          <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n          <Navbar.Collapse id='basic-navbar-nav'>\r\n            <Route render={({ history }) => <SearchBox history={history} />} />\r\n\r\n            <Nav className='ml-auto'>\r\n              <LinkContainer to='/cart'>\r\n                <Nav.Link>\r\n                  <i className='fas fa-shopping-bag'></i> Cart\r\n                </Nav.Link>\r\n              </LinkContainer>\r\n              {userInfo ? (\r\n                <NavDropdown\r\n                  style={{ flexDirection: 'row' }}\r\n                  title={\r\n                    // <div style={{ flexDirection: 'row', width: '100%' }}>\r\n                    //   <Image\r\n                    //     className='thumbnail-image'\r\n                    //     style={{\r\n                    //       height: '2rem',\r\n                    //       borderRadius: '5rem',\r\n                    //       marginRight: '.5rem',\r\n                    //     }}\r\n                    //     src={`/images/${userInfo.data.user.photo}`}\r\n                    //     alt={userInfo.data.user.name}\r\n                    //   />\r\n                    userInfo.data.user.name\r\n                    // </div>\r\n                  }\r\n                  id='username'\r\n                >\r\n                  <LinkContainer to='/profile'>\r\n                    <NavDropdown.Item>Profile</NavDropdown.Item>\r\n                  </LinkContainer>\r\n                  <LinkContainer to='/myOrderList'>\r\n                    <NavDropdown.Item>Orders</NavDropdown.Item>\r\n                  </LinkContainer>\r\n                  <NavDropdown.Item onClick={logoutHandler}>Logout</NavDropdown.Item>\r\n                </NavDropdown>\r\n              ) : (\r\n                <LinkContainer to='/login'>\r\n                  <Nav.Link>\r\n                    <i className='fas fa-user'></i> Login\r\n                  </Nav.Link>\r\n                </LinkContainer>\r\n              )}\r\n              {userInfo && userInfo.data.user.role === 'admin' && (\r\n                <NavDropdown title='Admin' id='adminmenu'>\r\n                  <LinkContainer to='/admin/userlist'>\r\n                    <NavDropdown.Item>Users</NavDropdown.Item>\r\n                  </LinkContainer>\r\n                  <LinkContainer to='/admin/productlist'>\r\n                    <NavDropdown.Item>Products</NavDropdown.Item>\r\n                  </LinkContainer>\r\n                  <LinkContainer to='/admin/orderlist'>\r\n                    <NavDropdown.Item>Orders</NavDropdown.Item>\r\n                  </LinkContainer>\r\n                </NavDropdown>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\HomeScreen.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\data\\products.js",[],["217","218"],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\Product.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\Rating.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\ProductScreen.js",["219"],"import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n  Row,\r\n  Col,\r\n  Image,\r\n  ListGroup,\r\n  Card,\r\n  Button,\r\n  Form,\r\n  Breadcrumb,\r\n  Tabs,\r\n  Tab,\r\n  Container,\r\n} from 'react-bootstrap';\r\nimport Rating from '../components/Rating';\r\nimport Message from '../components/Message';\r\nimport Loader from '../components/Loader';\r\n\r\nimport { listProductDetails, createProductReview } from '../redux/actions/productActions';\r\nimport { PRODUCT_CREATE_REVIEW_RESET } from '../redux/constants/productConstants';\r\n\r\nconst ProductScreen = ({ match, history }) => {\r\n  // const [product, setProduct] = useState({});\r\n  // useEffect(() => {\r\n  //   const fetchProduct = async () => {\r\n  //     try {\r\n  //       const { data } = await axios.get(`/api/v1/products/${match.params.id}`);\r\n  //       setProduct(data.data.product);\r\n  //       console.log(data.data.product);\r\n  //     } catch (err) {\r\n  //       console.log(err);\r\n  //     }\r\n  //   };\r\n  //   fetchProduct();\r\n  // }, [match]);\r\n  const [qty, setQty] = useState(1);\r\n\r\n  const [rating, setRating] = useState(0);\r\n  const [comment, setComment] = useState('');\r\n  const dispatch = useDispatch();\r\n  const productDetails = useSelector((state) => state.productDetails);\r\n  const { loading, error, product } = productDetails;\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n  const productReviewCreate = useSelector((state) => state.productReviewCreate);\r\n  const {\r\n    success: successProductReview,\r\n    loading: loadingProductReview,\r\n    error: errorProductReview,\r\n  } = productReviewCreate;\r\n  useEffect(() => {\r\n    if (successProductReview) {\r\n      setRating(0);\r\n      setComment('');\r\n    }\r\n    if (!product._id || product._id !== match.params.id) {\r\n      dispatch(listProductDetails(match.params.id));\r\n      dispatch({ type: PRODUCT_CREATE_REVIEW_RESET });\r\n    }\r\n  }, [dispatch, match, product._id, successProductReview]);\r\n\r\n  const addtoCartHandler = () => {\r\n    // redirect to cart\r\n    history.push(`/cart/${match.params.id}?qty=${qty}`);\r\n  };\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(\r\n      createProductReview(match.params.id, {\r\n        rating,\r\n        comment,\r\n      })\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <Link className='btn btn-primary my-3' to='/'>\r\n        Go back\r\n      </Link>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Message variant='danger'>{error}</Message>\r\n      ) : (\r\n        <>\r\n          <Row>\r\n            <Col md={5}>\r\n              <Image src={product.image} alt={product.name} fluid />\r\n            </Col>\r\n            <Col md={4}>\r\n              {/* flush removes border */}\r\n              <ListGroup variant='flush'>\r\n                <ListGroup.Item>\r\n                  <h4>{product.name}</h4>\r\n                </ListGroup.Item>\r\n                <ListGroup.Item>\r\n                  <Rating value={product.rating} text={product.numReviews} />\r\n                </ListGroup.Item>\r\n                <ListGroup.Item>\r\n                  <h5>\r\n                    Price: <span className='color-wh'>${product.price}</span>\r\n                  </h5>\r\n                </ListGroup.Item>\r\n                <ListGroup.Item>\r\n                  {/* <strong> Description: </strong> */}\r\n                  {product.description}\r\n                </ListGroup.Item>\r\n              </ListGroup>\r\n            </Col>\r\n            <Col md={3}>\r\n              <Card>\r\n                <ListGroup variant='flush'>\r\n                  <ListGroup.Item>\r\n                    <Row>\r\n                      <Col>Price:</Col>{' '}\r\n                      <Col>\r\n                        <strong>${product.price}</strong>\r\n                      </Col>\r\n                    </Row>\r\n                  </ListGroup.Item>\r\n                </ListGroup>\r\n                <ListGroup variant='flush'>\r\n                  <ListGroup.Item>\r\n                    <Row>\r\n                      <Col>Status:</Col>{' '}\r\n                      <Col>{product.countInStock > 0 ? 'In Stock' : 'Out Of Stock'}</Col>\r\n                    </Row>\r\n                  </ListGroup.Item>\r\n                  {product.countInStock > 0 && (\r\n                    <ListGroup.Item>\r\n                      <Row>\r\n                        <Col>Qty:</Col>{' '}\r\n                        <Col>\r\n                          <Form.Control\r\n                            as='select'\r\n                            value={qty}\r\n                            onChange={(e) => setQty(e.target.value)}\r\n                          >\r\n                            {[...Array(product.countInStock).keys()].map((val) => (\r\n                              <option key={val + 1} value={val + 1}>\r\n                                {val + 1}\r\n                              </option>\r\n                            ))}\r\n                          </Form.Control>\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  )}\r\n                  <ListGroup.Item>\r\n                    <Button\r\n                      className='btn-block font-weight-bold'\r\n                      type='button'\r\n                      disabled={product.countInStock === 0}\r\n                      onClick={addtoCartHandler}\r\n                    >\r\n                      ADD TO CART\r\n                    </Button>\r\n                  </ListGroup.Item>\r\n                </ListGroup>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Tabs\r\n              defaultActiveKey='home'\r\n              id='uncontrolled-tab-example'\r\n              style={{ width: '100%', justifyContent: 'center' }}\r\n              className='my-5'\r\n            >\r\n              <Tab eventKey='home' title='Description' className='py-3'>\r\n                <p>\r\n                  Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse\r\n                  molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero\r\n                  eros et accumsan et iusto odio dignissim qui blandit praesent luptatum\r\n                  zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber\r\n                  tempor cum soluta nobis eleifend option congue nihil imperdiet doming id\r\n                  quod mazim placerat facer possim assum. Typi non habent claritatem\r\n                  insitam est usus legentis in iis qui facit eorum claritatem.\r\n                </p>\r\n                <p>\r\n                  Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam\r\n                  nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat\r\n                  volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation\r\n                  ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.\r\n                </p>\r\n                <ul>\r\n                  <li>- Typi non habent claritatem insitam</li>\r\n                  <li>- Est usus legentis in iis qui facit eorum claritatem.</li>\r\n                  <li>\r\n                    - Investigationes demonstraverunt lectores legere me lius quod ii\r\n                    legunt saepius.\r\n                  </li>\r\n                  <li>\r\n                    - Claritas est etiam processus dynamicus, qui sequitur mutationem\r\n                    consuetudium lectorum.\r\n                  </li>\r\n                </ul>\r\n              </Tab>\r\n              <Tab eventKey='profile' title='Tags' className='py-3'>\r\n                <p>Tags: Green, Herbal, Loose, Mate, Organic , Special</p>\r\n              </Tab>\r\n              <Tab\r\n                eventKey='review'\r\n                title='Reviews'\r\n                className='py-3'\r\n                style={{ width: '80vw' }}\r\n              >\r\n                <Container>\r\n                  <Row>\r\n                    <Col md={6}>\r\n                      {product.reviews && product.reviews.length === 0 && (\r\n                        <Message variant='warning'>No Reviews</Message>\r\n                      )}\r\n                      <ListGroup variant='flush' className='review-list'>\r\n                        {product.reviews &&\r\n                          product.reviews.map((review) => (\r\n                            <ListGroup.Item key={review._id}>\r\n                              <strong>{review.name}</strong>\r\n                              <Rating value={review.rating} />\r\n                              <p>{review.createdAt.substring(0, 10)}</p>\r\n                              <p>{review.comment}</p>\r\n                            </ListGroup.Item>\r\n                          ))}\r\n                      </ListGroup>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                      <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                          <h4>Write a Customer Review</h4>\r\n                          {successProductReview && (\r\n                            <Message variant='success'>\r\n                              Review submitted successfully\r\n                            </Message>\r\n                          )}\r\n                          {loadingProductReview && <Loader />}\r\n                          {errorProductReview && (\r\n                            <Message variant='danger'>{errorProductReview}</Message>\r\n                          )}\r\n                          {userInfo ? (\r\n                            <Form onSubmit={submitHandler}>\r\n                              <Form.Group controlId='rating'>\r\n                                <Form.Label>Rating</Form.Label>\r\n                                <Form.Control\r\n                                  as='select'\r\n                                  value={rating}\r\n                                  onChange={(e) => setRating(e.target.value)}\r\n                                >\r\n                                  <option value=''>Select...</option>\r\n                                  <option value='1'>1 - Poor</option>\r\n                                  <option value='2'>2 - Fair</option>\r\n                                  <option value='3'>3 - Good</option>\r\n                                  <option value='4'>4 - Very Good</option>\r\n                                  <option value='5'>5 - Excellent</option>\r\n                                </Form.Control>\r\n                              </Form.Group>\r\n                              <Form.Group controlId='comment'>\r\n                                <Form.Label>Comment</Form.Label>\r\n                                <Form.Control\r\n                                  as='textarea'\r\n                                  row='3'\r\n                                  value={comment}\r\n                                  onChange={(e) => setComment(e.target.value)}\r\n                                ></Form.Control>\r\n                              </Form.Group>\r\n                              <Button\r\n                                disabled={loadingProductReview}\r\n                                type='submit'\r\n                                variant='primary'\r\n                              >\r\n                                Submit\r\n                              </Button>\r\n                            </Form>\r\n                          ) : (\r\n                            <Message>\r\n                              Please <Link to='/login'>sign in</Link> to write a review{' '}\r\n                            </Message>\r\n                          )}\r\n                        </ListGroup.Item>\r\n                      </ListGroup>\r\n                    </Col>\r\n                  </Row>{' '}\r\n                </Container>\r\n              </Tab>\r\n            </Tabs>\r\n          </Row>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductScreen;\r\n","D:\\Projects\\Imart\\imart-app\\frontend\\src\\store.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\redux\\constants\\productConstants.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\redux\\reducers\\productReducers.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\redux\\actions\\productActions.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\Message.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\Loader.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\CartScreen.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\redux\\reducers\\cartReducers.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\redux\\constants\\cartConstants.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\redux\\actions\\cartActions.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\redux\\reducers\\userReducers.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\redux\\constants\\userConstants.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\LoginScreen.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\FormContainer.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\redux\\actions\\userActions.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\RegisterScreen.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\ProfileScreen.js",["220","221","222"],"import React, { useState, useEffect } from 'react';\r\nimport { Table, Form, Button, Row, Col } from 'react-bootstrap';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Message from '../components/Message';\r\nimport Loader from '../components/Loader';\r\nimport { getUserDetails, updateUserProfile } from '../redux/actions/userActions';\r\nimport { listMyOrders } from '../redux/actions/orderActions';\r\n// import { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants';\r\nimport FormContainer from '../components/FormContainer';\r\n\r\nconst ProfileScreen = ({ location, history }) => {\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [passwordConfirm, setPasswordConfirm] = useState('');\r\n  const [message, setMessage] = useState(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const userDetails = useSelector((state) => state.userDetails);\r\n  const {\r\n    loading,\r\n    error,\r\n    user: { data },\r\n  } = userDetails;\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n\r\n  const userUpdateProfile = useSelector((state) => state.userUpdateProfile);\r\n  const { success } = userUpdateProfile;\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push('/login');\r\n    } else {\r\n      if (!data) {\r\n        dispatch(getUserDetails('profile'));\r\n      } else {\r\n        setName(data.user.name);\r\n        setEmail(data.user.email);\r\n      }\r\n    }\r\n  }, [dispatch, history, userInfo, data]);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    if (password !== passwordConfirm) {\r\n      setMessage('Passwords do not match');\r\n    } else {\r\n      dispatch(updateUserProfile({ id: data.user._id, name, email, password }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormContainer>\r\n      <Row className='py-5'>\r\n        <Col>\r\n          <h1 className='py-2'>\r\n            <strong>User Profile</strong>\r\n          </h1>\r\n          {message && <Message variant='danger'>{message}</Message>}\r\n\r\n          {error && <Message variant='danger'>{error}</Message>}\r\n          {success && <Message variant='success'>Profile Updated</Message>}\r\n          {loading && <Loader />}\r\n          <Form onSubmit={submitHandler}>\r\n            <Form.Group controlId='name'>\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type='name'\r\n                placeholder='Enter Name'\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId='email'>\r\n              <Form.Label>Email Address</Form.Label>\r\n              <Form.Control\r\n                type='email'\r\n                placeholder='Enter email'\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId='password'>\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                type='password'\r\n                placeholder='Enter Password'\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId='passwordConfirm'>\r\n              <Form.Label>Confirm Password</Form.Label>\r\n              <Form.Control\r\n                type='password'\r\n                placeholder='Enter Confirm Password'\r\n                value={passwordConfirm}\r\n                onChange={(e) => setPasswordConfirm(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Button type='submit' variant='primary'>\r\n              Update Profile\r\n            </Button>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </FormContainer>\r\n  );\r\n};\r\n\r\nexport default ProfileScreen;\r\n","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\ShippingScreen.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\CheckoutSteps.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\PaymentScreen.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\PlaceOrderScreen.js",["223"],"import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Message from '../components/Message';\r\nimport CheckoutSteps from '../components/CheckoutSteps';\r\nimport { createOrder } from '../redux/actions/orderActions';\r\nimport { createStore } from 'redux';\r\n// import { ORDER_CREATE_RESET } from '../redux/constants/orderConstants';\r\n// import { USER_DETAILS_RESET } from '../redux/constants/userConstants';\r\n\r\nconst PlaceOrderScreen = ({ history }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const cart = useSelector((state) => state.cart);\r\n\r\n  if (!cart.shippingAddress.address) {\r\n    history.push('/shipping');\r\n  } else if (!cart.paymentMethod) {\r\n    history.push('/payment');\r\n  }\r\n  //  Calculate prices and add them to cart object\r\n  const addDecimals = (num) => {\r\n    return (Math.round(num * 100) / 100).toFixed(2);\r\n  };\r\n\r\n  cart.itemsPrice = addDecimals(\r\n    cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0)\r\n  );\r\n  cart.shippingPrice = addDecimals(cart.itemsPrice < 500 ? 0 : 50);\r\n  cart.taxPrice = addDecimals(Number((0.15 * cart.itemsPrice).toFixed(2)));\r\n  cart.totalPrice = (\r\n    Number(cart.itemsPrice) +\r\n    Number(cart.shippingPrice) +\r\n    Number(cart.taxPrice)\r\n  ).toFixed(2);\r\n\r\n  const orderCreate = useSelector((state) => state.orderCreate);\r\n  const { success, error, order } = orderCreate;\r\n  console.log(error, success, order);\r\n  useEffect(() => {\r\n    if (success) {\r\n      history.push(`/order/${order._id}`);\r\n      // dispatch({ type: USER_DETAILS_RESET });\r\n      //   dispatch({ type: ORDER_CREATE_RESET });\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [history, success]);\r\n\r\n  const placeOrderHandler = () => {\r\n    console.log(cart.cartItems);\r\n    dispatch(\r\n      createOrder({\r\n        orderItems: cart.cartItems,\r\n        shippingAddress: cart.shippingAddress,\r\n        paymentMethod: cart.paymentMethod,\r\n        itemsPrice: cart.itemsPrice,\r\n        shippingPrice: cart.shippingPrice,\r\n        taxPrice: cart.taxPrice,\r\n        totalPrice: cart.totalPrice,\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <CheckoutSteps step1 step2 step3 step4 />\r\n      <Row>\r\n        <Col md={8}>\r\n          <ListGroup variant='flush'>\r\n            <ListGroup.Item>\r\n              <h3>Shipping</h3>\r\n              <p>\r\n                <strong>Address: </strong>\r\n                {cart.shippingAddress.address}, {cart.shippingAddress.city}{' '}\r\n                {cart.shippingAddress.postalCode}, {cart.shippingAddress.country}\r\n              </p>\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h3>Payment Method</h3>\r\n              <strong>Method: </strong>\r\n              {cart.paymentMethod}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h3>Order Items</h3>\r\n              {cart.cartItems.length === 0 ? (\r\n                <Message>Your cart is empty</Message>\r\n              ) : (\r\n                <ListGroup variant='flush'>\r\n                  {cart.cartItems.map((item, index) => (\r\n                    <ListGroup.Item key={index}>\r\n                      <Row>\r\n                        <Col md={1}>\r\n                          <Image src={item.image} alt={item.name} fluid rounded />\r\n                        </Col>\r\n                        <Col>\r\n                          <Link to={`/product/${item.id}`}>{item.name}</Link>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                          {item.qty} x ${item.price} = ${item.qty * item.price}\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  ))}\r\n                </ListGroup>\r\n              )}\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card>\r\n            <ListGroup variant='flush'>\r\n              <ListGroup.Item>\r\n                <h2>Order Summary</h2>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Items</Col>\r\n                  <Col>${cart.itemsPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Shipping</Col>\r\n                  <Col>${cart.shippingPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Tax</Col>\r\n                  <Col>${cart.taxPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Total</Col>\r\n                  <Col>${cart.totalPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                {error && <Message variant='danger'>{error}</Message>}\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Button\r\n                  type='button'\r\n                  className='btn-block'\r\n                  disabled={cart.cartItems === 0}\r\n                  onClick={placeOrderHandler}\r\n                >\r\n                  PLACE ORDER\r\n                </Button>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlaceOrderScreen;\r\n","D:\\Projects\\Imart\\imart-app\\frontend\\src\\redux\\reducers\\orderReducers.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\redux\\constants\\orderConstants.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\redux\\actions\\orderActions.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\OrderScreen.js",["224"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { PayPalButton } from 'react-paypal-button-v2';\r\nimport { Link } from 'react-router-dom';\r\nimport { Row, Col, ListGroup, Image, Card, Button } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Message from '../components/Message';\r\nimport Loader from '../components/Loader';\r\nimport { getOrderDetails, payOrder, deliverOrder } from '../redux/actions/orderActions';\r\nimport { ORDER_PAY_RESET, ORDER_DELIVER_RESET } from '../redux/constants/orderConstants';\r\n\r\nconst OrderScreen = ({ match, history }) => {\r\n  const orderId = match.params.id;\r\n\r\n  const [sdkReady, setSdkReady] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const orderDetails = useSelector((state) => state.orderDetails);\r\n  const { order, loading, error } = orderDetails;\r\n\r\n  const orderPay = useSelector((state) => state.orderPay);\r\n  const { loading: loadingPay, success: successPay } = orderPay;\r\n\r\n  const orderDeliver = useSelector((state) => state.orderDeliver);\r\n  const { loading: loadingDeliver, success: successDeliver } = orderDeliver;\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n\r\n  if (!loading) {\r\n    //   Calculate prices\r\n    const addDecimals = (num) => {\r\n      return (Math.round(num * 100) / 100).toFixed(2);\r\n    };\r\n\r\n    order.itemsPrice = addDecimals(\r\n      order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0)\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push('/login');\r\n    }\r\n\r\n    const addPayPalScript = async () => {\r\n      const { data: clientId } = await axios.get('/api/config/paypal');\r\n      const script = document.createElement('script');\r\n      script.type = 'text/javascript';\r\n      script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`;\r\n      script.async = true;\r\n      script.onload = () => {\r\n        setSdkReady(true);\r\n      };\r\n      document.body.appendChild(script);\r\n    };\r\n\r\n    if (!order || successPay || successDeliver || order._id !== orderId) {\r\n      // dispatch reset here instead of action\r\n      dispatch({ type: ORDER_PAY_RESET });\r\n      dispatch({ type: ORDER_DELIVER_RESET });\r\n      dispatch(getOrderDetails(orderId));\r\n      //if order is not paid, set the script else sdk to true\r\n    } else if (!order.isPaid) {\r\n      if (!window.paypal) {\r\n        addPayPalScript();\r\n      } else {\r\n        setSdkReady(true);\r\n      }\r\n    }\r\n  }, [dispatch, orderId, order, successDeliver, successPay]);\r\n\r\n  const successPaymentHandler = (paymentResult) => {\r\n    dispatch(payOrder(orderId, paymentResult));\r\n  };\r\n\r\n  const deliverHandler = () => {\r\n    dispatch(deliverOrder(order));\r\n  };\r\n\r\n  return loading ? (\r\n    <Loader />\r\n  ) : error ? (\r\n    <Message variant='danger'>{error}</Message>\r\n  ) : (\r\n    <>\r\n      <h1 className='pt-5'>\r\n        <strong> Order nr:</strong> {order._id}\r\n      </h1>\r\n      <Row className='pb-5'>\r\n        <Col md={8}>\r\n          <ListGroup variant='flush'>\r\n            <ListGroup.Item>\r\n              <h4>\r\n                <strong>Shipping</strong>\r\n              </h4>\r\n              <p>\r\n                <strong>Name: </strong> {order.user.name}\r\n              </p>\r\n              <p>\r\n                <strong>Email: </strong>{' '}\r\n                <a href={`mailto:${order.user.email}`}>{order.user.email}</a>\r\n              </p>\r\n              <p>\r\n                <strong>Address: </strong>\r\n                {order.shippingAddress.address}, {order.shippingAddress.city}{' '}\r\n                {order.shippingAddress.postalCode}, {order.shippingAddress.country}\r\n              </p>\r\n              {order.isDelivered ? (\r\n                <Message variant='success'>Delivered on {order.deliveredAt}</Message>\r\n              ) : (\r\n                <Message variant='danger'>Not Delivered</Message>\r\n              )}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h4>\r\n                <strong>Payment Method</strong>\r\n              </h4>\r\n              <p>\r\n                <strong>Method: </strong>\r\n                {order.paymentMethod}\r\n              </p>\r\n              {order.isPaid ? (\r\n                <Message variant='success'>Paid on {order.paidAt}</Message>\r\n              ) : (\r\n                <Message variant='danger'>Not Paid</Message>\r\n              )}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h4>\r\n                <strong>Order Items Method</strong>\r\n              </h4>\r\n\r\n              {order.orderItems.length === 0 ? (\r\n                <Message>Order is empty</Message>\r\n              ) : (\r\n                <ListGroup variant='flush'>\r\n                  {order.orderItems.map((item, index) => (\r\n                    <ListGroup.Item key={index}>\r\n                      <Row>\r\n                        <Col md={1}>\r\n                          <Image src={item.image} alt={item.name} fluid rounded />\r\n                        </Col>\r\n                        <Col>\r\n                          <Link to={`/product/${item.id}`}>{item.name}</Link>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                          {item.qty} x ${item.price} = ${item.qty * item.price}\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  ))}\r\n                </ListGroup>\r\n              )}\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card>\r\n            <ListGroup variant='flush'>\r\n              <ListGroup.Item>\r\n                <h2 className='color-pr'>Order Summary</h2>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Items</Col>\r\n                  <Col>${order.itemsPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Shipping</Col>\r\n                  <Col>${order.shippingPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Tax</Col>\r\n                  <Col>${order.taxPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row className='color-pr '>\r\n                  <Col>\r\n                    <strong>Total</strong>\r\n                  </Col>\r\n                  <Col>\r\n                    <strong> ${order.totalPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              {!order.isPaid && (\r\n                <ListGroup.Item>\r\n                  {loadingPay && <Loader />}\r\n                  {!sdkReady ? (\r\n                    <Loader />\r\n                  ) : (\r\n                    <PayPalButton\r\n                      amount={order.totalPrice}\r\n                      onSuccess={successPaymentHandler}\r\n                    />\r\n                  )}\r\n                </ListGroup.Item>\r\n              )}\r\n              {loadingDeliver && <Loader />}\r\n              {userInfo &&\r\n                userInfo.data.user.role === 'admin' &&\r\n                order.isPaid &&\r\n                !order.isDelivered && (\r\n                  <ListGroup.Item>\r\n                    <Button\r\n                      type='button'\r\n                      className='btn btn-block'\r\n                      onClick={deliverHandler}\r\n                    >\r\n                      Mark As Delivered\r\n                    </Button>\r\n                  </ListGroup.Item>\r\n                )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OrderScreen;\r\n\r\n// Object  : Results of Payments\r\n// create_time: \"2020-12-08T12:32:28Z\"\r\n// id: \"4TY43469PG5290835\"\r\n// intent: \"CAPTURE\"\r\n// links: Array(1)\r\n// 0:\r\n// href: \"https://api.sandbox.paypal.com/v2/checkout/orders/4TY43469PG5290835\"\r\n// method: \"GET\"\r\n// rel: \"self\"\r\n// title: \"GET\"\r\n// __proto__: Object\r\n// length: 1\r\n// __proto__: Array(0)\r\n// payer:\r\n// address:\r\n// country_code: \"US\"\r\n// __proto__: Object\r\n// email_address: \"sb-xmj8s4012035@personal.example.com\"\r\n// name:\r\n// given_name: \"John\"\r\n// surname: \"Doe\"\r\n// __proto__: Object\r\n// payer_id: \"WHEL8GLMY63C8\"\r\n// __proto__: Object\r\n// purchase_units: Array(1)\r\n// 0:\r\n// amount: {value: \"739.99\", currency_code: \"USD\"}\r\n// payee: {email_address: \"sb-xiywa4007734@business.example.com\", merchant_id: \"WNZLM7RGMMJKJ\"}\r\n// payments: {captures: Array(1)}\r\n// reference_id: \"default\"\r\n// shipping: {name: {…}, address: {…}}\r\n// __proto__: Object\r\n// length: 1\r\n// __proto__: Array(0)\r\n// status: \"COMPLETED\"\r\n// update_time: \"2020-12-08T12:35:02Z\"\r\n// __proto__: Object\r\n","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\UserListScreen.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\UserEditScreen.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\ProductListScreen.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\ProductEditScreen.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\OrderListScreen.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\Meta.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\SearchBox.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\Paginate.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\ProductCarousel.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\components\\Newsletter.js",["225","226"],"import React, { useState } from 'react';\r\nimport { Button, Container, Form, Jumbotron } from 'react-bootstrap';\r\nimport SearchBox from './SearchBox';\r\nimport sub from './../assets/sub.jpg';\r\nimport { First } from 'react-bootstrap/esm/PageItem';\r\nconst Newsletter = () => {\r\n  const [confirmSubmit, setConfirmSubmit] = useState('');\r\n  const submitHandler = () => {\r\n    setConfirmSubmit('form Submitted');\r\n  };\r\n  return (\r\n    <Container>\r\n      <Jumbotron\r\n        className='text-center my-5'\r\n        style={{\r\n          width: '100%',\r\n          height: '50vh',\r\n          background: `url(${sub}) transparent`,\r\n          backgroundSize: 'cover',\r\n          filter: 'blur(.1px)',\r\n          backgroundPosition: 'center center',\r\n        }}\r\n      >\r\n        <h1 className='text-white' style={{ textShadow: '1px 1px' }}>\r\n          Join Our Newsletter\r\n        </h1>\r\n        <Form onSubmit={submitHandler} inline style={{ justifyContent: 'center' }}>\r\n          <Form.Control\r\n            type='email'\r\n            required\r\n            name='q'\r\n            placeholder='Enter Email ...'\r\n            className='mr-sm-2 '\r\n          ></Form.Control>\r\n          <Button type='submit' className='btn-primary '>\r\n            Subscribe\r\n          </Button>\r\n        </Form>\r\n        <p>{confirmSubmit}</p>\r\n      </Jumbotron>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Newsletter;\r\n","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\MyOrderScreen.js",["227","228","229","230"],"import React, { useState, useEffect } from 'react';\r\nimport { Table, Form, Button, Row, Col } from 'react-bootstrap';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Message from '../components/Message';\r\nimport Loader from '../components/Loader';\r\nimport { listMyOrders } from '../redux/actions/orderActions';\r\n// import { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants';\r\n\r\nconst MyOrderScreen = ({ location, history }) => {\r\n  const dispatch = useDispatch();\r\n  const userDetails = useSelector((state) => state.userDetails);\r\n  const {\r\n    loading,\r\n    error,\r\n    user: { data },\r\n  } = userDetails;\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n\r\n  const orderListMy = useSelector((state) => state.orderListMy);\r\n  const { loading: loadingOrders, error: errorOrders, orders } = orderListMy;\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push('/login');\r\n    } else {\r\n      dispatch(listMyOrders());\r\n    }\r\n  }, [dispatch, history, userInfo, data]);\r\n\r\n  return (\r\n    <Row className='py-5'>\r\n      <Col md={12}>\r\n        <h1 className='py-2'>\r\n          <strong>My Orders</strong>{' '}\r\n        </h1>\r\n\r\n        {loadingOrders ? (\r\n          <Loader />\r\n        ) : errorOrders ? (\r\n          <Message variant='danger'>{errorOrders}</Message>\r\n        ) : (\r\n          <Table striped bordered hover responsive className='table-sm'>\r\n            <thead>\r\n              <tr>\r\n                <th>ID</th>\r\n                <th>DATE</th>\r\n                <th>TOTAL</th>\r\n                <th>PAID</th>\r\n                <th>DELIVERED</th>\r\n                <th></th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {orders.map((order) => (\r\n                <tr key={order._id}>\r\n                  <td>{order._id}</td>\r\n                  <td>{order.createdAt.substring(0, 10)}</td>\r\n                  <td>{order.totalPrice}</td>\r\n                  <td>\r\n                    {order.isPaid ? (\r\n                      order.paidAt.substring(0, 10)\r\n                    ) : (\r\n                      <i className='fas fa-times text-danger'></i>\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    {order.isDelivered ? (\r\n                      order.deliveredAt.substring(0, 10)\r\n                    ) : (\r\n                      <i className='fas fa-times text-danger'></i>\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    <LinkContainer to={`/order/${order._id}`}>\r\n                      <Button className=' btn-primary' variant='dark'>\r\n                        Details\r\n                      </Button>\r\n                    </LinkContainer>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default MyOrderScreen;\r\n","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\AboutScreen.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\ContactScreen.js",["231"],"import React, { useState } from 'react';\r\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport FormContainer from '../components/FormContainer';\r\nimport Message from '../components/Message';\r\n\r\nconst ContactScreen = () => {\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [submitText, setSubmitText] = useState(null);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    setSubmitText('Message Sent Successfully');\r\n    const item = e.target.children[4];\r\n    console.log(item);\r\n  };\r\n\r\n  return (\r\n    <FormContainer>\r\n      <Row className='justify-content-center'>\r\n        <Col>\r\n          <h1>Contact</h1>\r\n\r\n          <Form onSubmit={submitHandler}>\r\n            <Form.Group controlId='email'>\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type='text'\r\n                placeholder='Enter name'\r\n                value={name}\r\n                required\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId='email'>\r\n              <Form.Label>Email Address</Form.Label>\r\n              <Form.Control\r\n                type='email'\r\n                placeholder='Enter email'\r\n                value={email}\r\n                required\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId='text'>\r\n              <Form.Label>Message</Form.Label>\r\n              <Form.Control\r\n                type='text'\r\n                placeholder='Enter Messages'\r\n                value={message}\r\n                as='textarea'\r\n                required\r\n                rows={5}\r\n                onChange={(e) => setMessage(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Button type='submit' variant='primary'>\r\n              Send Message\r\n            </Button>\r\n            <Message\r\n              variant={submitText ? 'success' : ''}\r\n              className='contact-message mt-5'\r\n            >\r\n              {submitText && submitText}\r\n            </Message>\r\n            <Row className='pb-4'>\r\n              <Col>\r\n                <LinkContainer to='/contact' className='mr-5'>\r\n                  <Link>\r\n                    <i class='fab fa-facebook-square'></i> Facebook\r\n                  </Link>\r\n                </LinkContainer>\r\n                <LinkContainer to='/contact' className='mr-5'>\r\n                  <Link>\r\n                    <i class='fab fa-instagram-square'></i> Instagram\r\n                  </Link>\r\n                </LinkContainer>\r\n                <LinkContainer to='/contact' className='mr-5'>\r\n                  <Link>\r\n                    <i class='fab fa-twitter-square'></i> Twitter\r\n                  </Link>\r\n                </LinkContainer>\r\n                <LinkContainer to='/contact' className='mr-5'>\r\n                  <Link>\r\n                    <i class='fab fa-pinterest-square'></i> Pinterest\r\n                  </Link>\r\n                </LinkContainer>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </FormContainer>\r\n  );\r\n};\r\n\r\nexport default ContactScreen;\r\n","D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\TermScreen.js",[],"D:\\Projects\\Imart\\imart-app\\frontend\\src\\screens\\PrivacyScreen.js",[],{"ruleId":"232","replacedBy":"233"},{"ruleId":"234","replacedBy":"235"},{"ruleId":"236","severity":1,"message":"237","line":2,"column":23,"nodeType":"238","messageId":"239","endLine":2,"endColumn":28},{"ruleId":"236","severity":1,"message":"240","line":2,"column":54,"nodeType":"238","messageId":"239","endLine":2,"endColumn":62},{"ruleId":"232","replacedBy":"241"},{"ruleId":"234","replacedBy":"242"},{"ruleId":"236","severity":1,"message":"243","line":14,"column":3,"nodeType":"238","messageId":"239","endLine":14,"endColumn":13},{"ruleId":"236","severity":1,"message":"244","line":2,"column":10,"nodeType":"238","messageId":"239","endLine":2,"endColumn":15},{"ruleId":"236","severity":1,"message":"245","line":3,"column":10,"nodeType":"238","messageId":"239","endLine":3,"endColumn":23},{"ruleId":"236","severity":1,"message":"246","line":8,"column":10,"nodeType":"238","messageId":"239","endLine":8,"endColumn":22},{"ruleId":"236","severity":1,"message":"247","line":8,"column":10,"nodeType":"238","messageId":"239","endLine":8,"endColumn":21},{"ruleId":"248","severity":1,"message":"249","line":72,"column":6,"nodeType":"250","endLine":72,"endColumn":60,"suggestions":"251"},{"ruleId":"236","severity":1,"message":"252","line":3,"column":8,"nodeType":"238","messageId":"239","endLine":3,"endColumn":17},{"ruleId":"236","severity":1,"message":"253","line":5,"column":10,"nodeType":"238","messageId":"239","endLine":5,"endColumn":15},{"ruleId":"236","severity":1,"message":"254","line":1,"column":17,"nodeType":"238","messageId":"239","endLine":1,"endColumn":25},{"ruleId":"236","severity":1,"message":"255","line":2,"column":17,"nodeType":"238","messageId":"239","endLine":2,"endColumn":21},{"ruleId":"236","severity":1,"message":"256","line":14,"column":5,"nodeType":"238","messageId":"239","endLine":14,"endColumn":12},{"ruleId":"236","severity":1,"message":"257","line":15,"column":5,"nodeType":"238","messageId":"239","endLine":15,"endColumn":10},{"ruleId":"236","severity":1,"message":"258","line":2,"column":10,"nodeType":"238","messageId":"239","endLine":2,"endColumn":19},"no-native-reassign",["259"],"no-negated-in-lhs",["260"],"no-unused-vars","'Image' is defined but never used.","Identifier","unusedVar","'Dropdown' is defined but never used.",["259"],["260"],"'Breadcrumb' is defined but never used.","'Table' is defined but never used.","'LinkContainer' is defined but never used.","'listMyOrders' is defined but never used.","'createStore' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.","ArrayExpression",["261"],"'SearchBox' is defined but never used.","'First' is defined but never used.","'useState' is defined but never used.","'Form' is defined but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'Container' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"262","fix":"263"},"Update the dependencies array to be: [dispatch, orderId, order, successDeliver, successPay, userInfo, history]",{"range":"264","text":"265"},[2532,2586],"[dispatch, orderId, order, successDeliver, successPay, userInfo, history]"]